package eu.fr.indyli.formation.business.entity;
// Generated 25 juin 2017 02:21:10 by Hibernate Tools 5.2.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.ColumnResult;
import javax.persistence.ConstructorResult;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.NamedNativeQuery;
import javax.persistence.OneToMany;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import org.apache.commons.lang3.builder.ToStringBuilder;

import eu.fr.indyli.formation.business.dto.UtilisateurAnnonceDTO;

/**
 * Utilisateur generated by hbm2java
 */
@Entity
@Table(name = "Utilisateur", uniqueConstraints = @UniqueConstraint(columnNames = "email"))
@SqlResultSetMapping(
        name = "utilisateurAnnonceMapping",
        classes = @ConstructorResult(
                targetClass = UtilisateurAnnonceDTO.class,
                columns = {
                    @ColumnResult(name = "idUtilisateur",type=Integer.class),
                    @ColumnResult(name = "nom",type = String.class),
                    @ColumnResult(name = "nbAnnonces", type = Integer.class)}))
@NamedNativeQuery(name="findUserAndAnnoncesCreatedQuery",query="SELECT u.id_utilisateur as idUtilisateur,u.name as nom,COUNT(a.id_annonce) as nbAnnonces FROM Utilisateur u INNER join Annonce a on a.id_utilisateur = u.id_utilisateur  group by a.id_utilisateur"
,resultSetMapping="utilisateurAnnonceMapping")
public class Utilisateur extends AbstractEcolisEntity implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8555509805548590121L;
	private Integer idUtilisateur;
	private String civilite;
	private String name;
	private String login;
	private String password;
	private String email;
	private byte enabled;
	private Date derniereConnexion;
	private int anneeDeNaissance;
	private String telephone;
	private Date dateInscription;
	private Set<Alerte> alertes = new HashSet<Alerte>(0);
	private Set<Annonce> annonces = new HashSet<Annonce>(0);
	private Set<Message> messages = new HashSet<Message>(0);
	private Set<Comment> comments = new HashSet<Comment>(0);
	private Set<Image> images = new HashSet<Image>(0);

	public Utilisateur() {
		this.dateInscription = new Date();
	}

	public Utilisateur(String civilite, String email, byte enabled, int anneeDeNaissance, Date dateInscription) {
		this.civilite = civilite;
		this.email = email;
		this.enabled = enabled;
		this.anneeDeNaissance = anneeDeNaissance;
		this.dateInscription = dateInscription;
	}

	public Utilisateur(String civilite, String name, String login, String password, String email, byte enabled,
			Date derniereConnexion, int anneeDeNaissance, String telephone, Date dateInscription, Set<Alerte> alertes,
			Set<Annonce> annonces, Set<Message> messages, Set<Comment> comments, Set<Image> images) {
		this.civilite = civilite;
		this.name = name;
		this.login = login;
		this.password = password;
		this.email = email;
		this.enabled = enabled;
		this.derniereConnexion = derniereConnexion;
		this.anneeDeNaissance = anneeDeNaissance;
		this.telephone = telephone;
		this.dateInscription = dateInscription;
		this.alertes = alertes;
		this.annonces = annonces;
		this.messages = messages;
		this.comments = comments;
		this.images = images;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id_utilisateur", unique = true, nullable = false)
	public Integer getIdUtilisateur() {
		return this.idUtilisateur;
	}

	public void setIdUtilisateur(Integer idUtilisateur) {
		this.idUtilisateur = idUtilisateur;
	}

	@Column(name = "civilite", nullable = false, length = 2)
	public String getCivilite() {
		return this.civilite;
	}

	public void setCivilite(String civilite) {
		this.civilite = civilite;
	}

	@Column(name = "name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "login")
	public String getLogin() {
		return this.login;
	}

	public void setLogin(String login) {
		this.login = login;
	}

	@Column(name = "password")
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "email", unique = true, nullable = false)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "enabled", nullable = false)
	public byte getEnabled() {
		return this.enabled;
	}

	public void setEnabled(byte enabled) {
		this.enabled = enabled;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "derniere_connexion", length = 19)
	public Date getDerniereConnexion() {
		return this.derniereConnexion;
	}

	public void setDerniereConnexion(Date derniereConnexion) {
		this.derniereConnexion = derniereConnexion;
	}

	@Column(name = "annee_de_naissance", nullable = false)
	public int getAnneeDeNaissance() {
		return this.anneeDeNaissance;
	}

	public void setAnneeDeNaissance(int anneeDeNaissance) {
		this.anneeDeNaissance = anneeDeNaissance;
	}

	@Column(name = "telephone", length = 30)
	public String getTelephone() {
		return this.telephone;
	}

	public void setTelephone(String telephone) {
		this.telephone = telephone;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_inscription", nullable = false, length = 19)
	public Date getDateInscription() {
		return this.dateInscription;
	}

	public void setDateInscription(Date dateInscription) {
		this.dateInscription = dateInscription;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "utilisateur")
	public Set<Alerte> getAlertes() {
		return this.alertes;
	}

	public void setAlertes(Set<Alerte> alertes) {
		this.alertes = alertes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "utilisateur")
	public Set<Annonce> getAnnonces() {
		return this.annonces;
	}

	public void setAnnonces(Set<Annonce> annonces) {
		this.annonces = annonces;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "utilisateur")
	public Set<Message> getMessages() {
		return this.messages;
	}

	public void setMessages(Set<Message> messages) {
		this.messages = messages;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "utilisateur")
	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "utilisateur")
	public Set<Image> getImages() {
		return this.images;
	}

	public void setImages(Set<Image> images) {
		this.images = images;
	}
	
	public String toString(){
		return ToStringBuilder.reflectionToString(this); 
	}

}
