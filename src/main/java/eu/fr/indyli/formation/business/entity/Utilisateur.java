package eu.fr.indyli.formation.business.entity;
// Generated 25 juin 2017 02:21:10 by Hibernate Tools 5.2.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.ColumnResult;
import javax.persistence.ConstructorResult;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.NamedNativeQuery;
import javax.persistence.OneToMany;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import org.apache.commons.lang3.builder.ToStringBuilder;

import eu.fr.indyli.formation.business.dto.UtilisateurAnnonceDTO;



/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "Utilisateur", uniqueConstraints = @UniqueConstraint(columnNames = "email"))
@SqlResultSetMapping(
        name = "utilisateurAnnonceMapping",
        classes = @ConstructorResult(
                targetClass = UtilisateurAnnonceDTO.class,
                columns = {
                    @ColumnResult(name = "userId",type=Integer.class),
                    @ColumnResult(name = "name",type = String.class),
                    @ColumnResult(name = "nbAnnouncements", type = Integer.class)}))
@NamedNativeQuery(name="findUserAndAnnoncesCreatedQuery",query="SELECT u.id_utilisateur as userId,u.name as name,COUNT(a.id_annonce) as nbAnnouncements FROM Utilisateur u INNER join Annonce a on a.id_utilisateur = u.id_utilisateur  group by a.id_utilisateur"
,resultSetMapping="utilisateurAnnonceMapping")
public class Utilisateur implements IEntity {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8555509805548590121L;
	
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id_utilisateur", unique = true, nullable = false)
	private Integer userId;
	
	@Column(name = "civilite", nullable = false, length = 2)
	private String civility;
	
	@Column(name = "name")
	private String name;
	
	@Column(name = "login")
	private String login;
	
	@Column(name = "password")
	private String password;
	
	@Column(name = "email", unique = true, nullable = false)
	private String email;
	
	@Column(name = "enabled", nullable = false)
	private byte enabled;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "derniere_connexion", length = 19)
	private Date lastConnection;
	
	@Column(name = "annee_de_naissance", nullable = false)
	private int yearOfBirth;
	
	@Column(name = "telephone", length = 30)
	private String phone;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_inscription", nullable = false, length = 19)
	private Date registrationDate;
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	private Set<Alerte> alerts = new HashSet<Alerte>(0);
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	private Set<Annonce> announcements = new HashSet<Annonce>(0);
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	private Set<Message> messages = new HashSet<Message>(0);
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	private Set<Comment> comments = new HashSet<Comment>(0);
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	private Set<Image> images = new HashSet<Image>(0);
	
	@Override
	public Integer getId() {
		return this.userId;
	}

	@Override
	public void setId(Integer id) {
		this.userId = id;
	}

	public String getCivility() {
		return this.civility;
	}

	public void setCivility(String civility) {
		this.civility = civility;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getLogin() {
		return this.login;
	}

	public void setLogin(String login) {
		this.login = login;
	}

	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public byte getEnabled() {
		return this.enabled;
	}

	public void setEnabled(byte enabled) {
		this.enabled = enabled;
	}

	public Date getLastConnection() {
		return this.lastConnection;
	}

	public void setLastConnection(Date lastConnection) {
		this.lastConnection = lastConnection;
	}

	public int getYearOfBirth() {
		return this.yearOfBirth;
	}

	public void setYearOfBirth(int yearOfBirth) {
		this.yearOfBirth = yearOfBirth;
	}

	public String getPhone() {
		return this.phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public Date getRegistrationDate() {
		return this.registrationDate;
	}

	public void setRegistrationDate(Date registrationDate) {
		this.registrationDate = registrationDate;
	}
	
	public Set<Alerte> getAlerts() {
		return this.alerts;
	}

	public void setAlerts(Set<Alerte> alerts) {
		this.alerts = alerts;
	}

	public Set<Annonce> getAnnouncements() {
		return this.announcements;
	}

	public void setAnnonces(Set<Annonce> announcements) {
		this.announcements = announcements;
	}

	public Set<Message> getMessages() {
		return this.messages;
	}

	public void setMessages(Set<Message> messages) {
		this.messages = messages;
	}

	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}

	public Set<Image> getImages() {
		return this.images;
	}

	public void setImages(Set<Image> images) {
		this.images = images;
	}
	
	public String toString(){
		return ToStringBuilder.reflectionToString(this); 
	}

}
